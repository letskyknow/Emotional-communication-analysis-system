services:
  # Frontend - Next.js with cyberpunk UI
  frontend:
    build: ./frontend
    container_name: emotion-frontend
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost/api}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost}
    ports:
      - "3001:3000"
    depends_on:
      - api
    networks:
      - emotion-network
    restart: unless-stopped

  # Backend API - NestJS
  api:
    build: ./backend
    container_name: emotion-api
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - DATABASE_URL=${DATABASE_URL:-postgresql://emotion_user:emotion_pass@postgres:5432/emotion_db}
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/emotion_tweets}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-default-secret-change-in-production}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - emotion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Data Scraper Service - Python
  scraper:
    build: ./scraper
    container_name: emotion-scraper
    env_file:
      - .env
    environment:
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/emotion_tweets}
      - SCRAPE_INTERVAL=${EVENT_SCRAPE_INTERVAL:-60}
    depends_on:
      - redis
      - mongo
    networks:
      - emotion-network
    restart: unless-stopped

  # Emotion Analyzer Service - Python with ML
  emotion-analyzer:
    build: ./emotion-analyzer
    container_name: emotion-analyzer
    env_file:
      - .env
    environment:
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/emotion_tweets}
      - MODEL_NAME=${EMOTION_MODEL_NAME:-uer/chinese_roberta_L-12_H-768}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:--1}
    depends_on:
      - redis
      - mongo
    networks:
      - emotion-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: emotion-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-emotion_db}
      - POSTGRES_USER=${POSTGRES_USER:-emotion_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-emotion_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - emotion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-emotion_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongo:
    image: mongo:6-jammy
    container_name: emotion-mongo
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - emotion-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: emotion-redis
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - emotion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: emotion-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - api
    networks:
      - emotion-network
    restart: unless-stopped

networks:
  emotion-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  redis_data: